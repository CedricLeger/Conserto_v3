package com.example.demo.controller;

import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.exception.ResourceNotFoundException;
import com.example.demo.model.Categorie;
import com.example.demo.model.Event;
import com.example.demo.model.User;
import com.example.demo.repository.CategorieRepository;

@RestController @CrossOrigin("*")
@RequestMapping("/api/v1/categorie")

public class CategorieController {
	
	private CategorieRepository categorieRepository;

	@RequestMapping(method = RequestMethod.GET)
	   public List<Categorie> getAllCategorie(){ 
	   	
	       return categorieRepository.findAll();
	   }
	   	     
	    @PostMapping("")
	    public Categorie createCategorie(@Valid @RequestBody Categorie categorie,BindingResult result)  {
	    	
	    	
	    		return createCategorieIfNotFound(categorie.getName());
	    }
	private final Categorie createCategorieIfNotFound(final String name) {
	    	Categorie categorie = categorieRepository.findByName(name);
	    	if(categorie == null) {
	    		categorie = new Categorie();
	    		categorie.setName(name);
	    		
	    		
	    		}
//	    	
	    	categorie = categorieRepository.save(categorie);
	    	return categorie;
	    }

	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	public Map<String, Boolean> deleteActivity(@PathVariable(value = "id") Long eventId)
	     throws ResourceNotFoundException {
	    Event event = eventRepository.findById(eventId)
	   .orElseThrow(() -> new ResourceNotFoundException("Event not found for this id :: " + eventId));

	    eventRepository.delete(event);
	    Map<String, Boolean> response = new HashMap<>();
	    response.put("deleted", Boolean.TRUE);
	    return response;
	}
	
}
