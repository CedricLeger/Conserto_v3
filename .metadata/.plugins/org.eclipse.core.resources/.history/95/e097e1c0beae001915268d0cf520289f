package com.example.demo.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.configuration.SetupDataLoader;
import com.example.demo.exception.ResourceNotFoundException;
import com.example.demo.model.Activity;
import com.example.demo.model.Event;
import com.example.demo.model.Privilege;
import com.example.demo.model.Role;
import com.example.demo.model.User;
import com.example.demo.repository.ActivityRepository;
import com.example.demo.repository.EventRepository;
import com.example.demo.repository.PrivilegeRepository;
import com.example.demo.repository.RoleRepository;
import com.example.demo.repository.UserRepository;
import com.example.demo.configuration.SetupDataLoader;
//import com.example.demo.service.UserService;

@RestController @CrossOrigin("*")
@RequestMapping("/api/v1")
public class UserController {
    @Autowired
    private UserRepository userRepository;
    private RoleRepository roleRepository;
//    private ActivityRepository activityRepository;
    private PrivilegeRepository privilegeRepository;
//    private EventRepository eventRepository;
  
   
//    private UserService userService;
    @Autowired
    private PasswordEncoder passwordEncoder;




    
    @GetMapping("/users")
    public List<User> getAllUsers(){ 
        return userRepository.findAll();
    }

    @GetMapping("/users/{id}")
    public ResponseEntity<User> getUserById(@PathVariable(value = "id") Long userId)
        throws ResourceNotFoundException {
        User user = userRepository.findById(userId)
          .orElseThrow(() -> new ResourceNotFoundException("User not found for this id :: " + userId));
        return ResponseEntity.ok().body(user);
    }
    
    @PostMapping("/users")
    public User createUser(@Valid @RequestBody User user,BindingResult result)  {
    	
    	
    		return createUserIfNotFound(user.getEmail(),user.getFirstName(),user.getLastName(),user.getPassword(),user.getRoles());
    }

    
   
//    public final User createUserIfNotFound(final String email, final String firstName, final String lastName, final String password, final Collection<Role> roles) {
//        User user = userRepository.findByEmail(email);
//        if (user == null) {
//        	Role userRole = roleRepository.findByName("ROLE_USER");
//            user = new User();
//            user.setFirstName(firstName);
//            user.setLastName(lastName);
//            user.setPassword(passwordEncoder.encode(password));
//            user.setEmail(email);
//           user.setRoles(Arrays.asList(new ArrayList<Role>(Arrays.asList(adminRole)));
//
//        }
//        user = userRepository.save(user);
//        return user;
//    }

	@PutMapping("/users/{id}")
    public ResponseEntity<User> updateUser(@PathVariable(value = "id") Long userId,
         @Valid @RequestBody User userDetails) throws ResourceNotFoundException {
        User user = userRepository.findById(userId)
        .orElseThrow(() -> new ResourceNotFoundException("User not found for this id :: " + userId));

        user.setEmail(userDetails.getEmail());
        user.setLastName(userDetails.getLastName());
        user.setFirstName(userDetails.getFirstName());
        user.setPassword(userDetails.getPassword());
        final User updatedUser = userRepository.save(user);
        return ResponseEntity.ok(updatedUser);
    }

    @DeleteMapping("/users/{id}")
    public Map<String, Boolean> deleteUser(@PathVariable(value = "id") Long userId)
         throws ResourceNotFoundException {
        User user = userRepository.findById(userId)
       .orElseThrow(() -> new ResourceNotFoundException("User not found for this id :: " + userId));

        userRepository.delete(user);
        Map<String, Boolean> response = new HashMap<>();
        response.put("deleted", Boolean.TRUE);
        return response;
    }
    
    //test
	@GetMapping(produces = "application/json")
	@RequestMapping({ "/" })
	public User validateLogin() {
		return new User();
	}
	
	
	//TEST USER
	

    // == create initial privileges
    final Privilege readPrivilege = createPrivilegeIfNotFound("READ_PRIVILEGE");
    final Privilege writePrivilege = createPrivilegeIfNotFound("WRITE_PRIVILEGE");
    final Privilege passwordPrivilege = createPrivilegeIfNotFound("CHANGE_PASSWORD_PRIVILEGE");

    // == create initial roles
    final List<Privilege> adminPrivileges = new ArrayList<Privilege>(Arrays.asList(readPrivilege, writePrivilege, passwordPrivilege));
    final List<Privilege> userPrivileges = new ArrayList<Privilege>(Arrays.asList(readPrivilege, passwordPrivilege));
     Role adminRole = createRoleIfNotFound("ROLE_ADMIN", adminPrivileges);
     Role userRole = createRoleIfNotFound("ROLE_USER", userPrivileges);

    // == create initial user
//    createUserIfNotFound("admin@admin.com", "admin", "admin", "admin", new ArrayList<Role>(Arrays.asList(adminRole)));
  
//    createActivityIfNotFound("test","test","ici",true,true,today,"12:00");
//    createEventIfNotFound("name","content",today,"localisation");
  


@Transactional
private final Privilege createPrivilegeIfNotFound(final String name) {
    
	Privilege privilege = privilegeRepository.findByName(name);
    if (privilege == null) {
        privilege = new Privilege(name);
        privilege = privilegeRepository.save(privilege);
    }
    return privilege;
}

@Transactional
private final Role createRoleIfNotFound(final String name, final Collection<Privilege> privileges) {
    Role role = roleRepository.findByName(name);
    if (role == null) {
        role = new Role(name);
    }
    role.setPrivileges(privileges);
    role = roleRepository.save(role);
    return role;
}

@Transactional
private final User createUserIfNotFound(final String email, final String firstName, final String lastName, final String password, final List<Role> roles) {
    User user = userRepository.findByEmail(email);
    if (user == null) {
        user = new User();
        user.setFirstName(firstName);
        user.setLastName(lastName);
        user.setPassword(passwordEncoder.encode(password));
        user.setEmail(email);

    }
    user.setRoles(new ArrayList<Role>(Arrays.asList(userRole)));
    user = userRepository.save(user);
    return user;
}

//@Transactional
//private final Activity createActivityIfNotFound(final String name,final String content ,final String localisation,final boolean condition, final boolean cover,final Date date , final String time) {
//	
//	Activity activity = activityRepository.findByName(name);
//	if(activity == null) {
//		activity = new Activity();
//		activity.setName(name);
//		activity.setContent(content);
//		activity.setLocalisation(localisation);
//		activity.setDate(date);
//		activity.setTime(time);
//		activity.setCondition(condition);
//		activity.setCover(cover);
//		}
////	activity.setUsers(users);
//	activity = activityRepository.save(activity);
//	return activity;
//}
//
//@Transactional
//private final Event createEventIfNotFound(final String name,final String content ,final Date date ,final String localisation) {
//	
//	Event event = eventRepository.findByName(name);
//	if(event == null) {
//		event = new Event();
//		event.setName(name);
//		event.setContent(content);
//		event.setLocalisation(localisation);
//		event.setDate(date);
//		
//		}
////	event.setUsers(users);
//	event = eventRepository.save(event);
//	return event;
//}
}
